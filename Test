1. Вопросы
Я хочу участвовать в стажировке, так как нашел направление AppSec наиболее интересным для себя: мне нравится работать с кодом и анализировать возможные действия злоумышленников, направленные на нанесение ущерба путем эксплуатации уязвимостей приложения. Стажировка является прекрасной возможностью поработать над решением реальных задач и получить ценные теоретические и практические знания. Кроме того, стажировка дает хорошую возможность для дальнейшего трудоустройства, что также немаловажно.
Касаемо моего опыта, коммерческие задачи я не решал, однако изучаю уязвимости приложений, участвую в ctf, решаю тренировочные задачи, связанные с поиском уязвимостей, и учусь в университете на направлении "Информационная безопасность". Так же был небольшой опыт реализации фильтрации действий пользователей при написании программ на лабораторных работах в университете.

2. Security code review

Часть 1. Security code review: GO
В приведенном коде присутствуют уязвимости в строке
query := fmt.Sprintf("SELECT * FROM products WHERE name LIKE '%%%s%%'", searchQuery)
Параметр searchQuery не проходит фильтрацию и подставляется в SQL-запрос к базе данных. Во-первых, имеет место инъекция SQL-запросов. Во-вторых, в запросе используется оператор LIKE и шаблон поиска; если шаблон поиска будет содержать другие символы подстановки (_ или %), то работа БД может замедлиться и привести к DoS-атаке. 
Перечисленные уязвимости могут позволить злоумышленнику получить, изменить или уничтожить данные из БД и замедлить работу приложения соответственно.
Для исправления уязвимостей необходимо реализовать очистку параметра от специальных символов.

Часть 2: Security code review: Python

Пример №2.1
В данном фрагменте кода присутствует уязвимость в строке 
output = Template('Hello ' + name + '! Your age is ' + age + '.').render()
Данные параметров GET-запроса без проверки добавляются в код страницы, таким образом легко реализовать reflected XSS.
Эксплуатируя данную уязвимость, злоумышленник может заставить браузер пользователя исполнять вредоносный код.
Для исправления данной уязвимости необходимо реализовать фильтрацию пользовательского ввода, в частности для параметра age проверять возможность на приведение строки к числовому типу.

Пример №2.2
В данном примере присутствует уязвимость в строке
output = subprocess.check_output(cmd, shell=True, text=True)
На машине выполняется команда, построенная с использованием пользовательского ввода из параметра GET-запроса, не прошедшего фильтрацию. Злоумышленник может запустить вредоносный код, реализовав инъекцию команд.
Последствия такой атаки могут варьироваться от получения злоумышленником данных о системе до полной ее компрометации.
В данном случае для обеспечения безопасности приведённой функции можно реализовать систему фильтрации или, поскольку в функции выполняется простая команда, можно передать аргументу shell значение False (значение по умолчанию). Это не позволит использовать возможности командной оболочки, но при этом снизит риски инъекции команд.

3. Моделирование угроз
В данном сервисе пользователи имеют возможность загружать файлы, что может быть потенциальным вектором атаки. Микросервисы на уровне бекэнда взаимодействуют с базами данных, поэтому имеют место риски SQL-инъекций. Возможны потенциальные угрозы, связанные с процессами аутентификации и авторизации. Также имеется вероятность проблем с конфигурацией системы, конкретными версиями используемого ПО и логикой работы микросервисов приложения.
Перечисленные потенциальные уязвимости могут привести к хищению чувствительной информации, например, персональных и аутентификационных данных пользователей. Существуют риски выполнения вредоносного кода в системе, получение неправомерного доступа к ней.
Для смягчения рисков, связанных с указанными уязвимостями, необходимо реализовывать следующие меры:
•	Обеспечение зашифрованной передачи данных между компонентами системы
•	Хранение чувствительной информации в зашифрованном виде
•	Использование хешей паролей для аутентификации
•	Использование актуальных протоколов криптографии и хеширования
•	Использование актуальных версий ПО
•	Фильтрация пользовательского ввода и загружаемых файлов.
Для более точного моделирования угроз важно понимать какой стек технологий планируется использовать, какие алгоритмы будут использоваться при работе с данными, каким образом будет развертываться приложение.
